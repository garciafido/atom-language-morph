name: 'Morph'
scopeName: 'source.morph'
type: 'tree-sitter'
parser: 'tree-sitter-morph'
fileTypes: ['morph']

firstLineRegex: [
  # shebang line
  '^#![ \\t]*/.*\\bmorph[\\d\\.]*\\b'

  # vim modeline
  'vim\\b.*\\bset\\b.*\\b(filetype|ft|syntax)=morph'
]

fileTypes: [
  'morph'
  'm'
]

comments:
  start: '// '

folds: [
  {
    type: 'comment'
  }
  {
    start: {type: '(', index: 0}
    end: {type: ')', index: -1}
  },
  {
    start: {type: '[', index: 0}
    end: {type: ']', index: -1}
  },
  {
    start: {type: '{', index: 0}
    end: {type: '}', index: -1}
  }
]

scopes:
    'Module': 'source.morph'

    '"private"': 'keyword.control'
    '"public"': 'keyword.control'
    'accessibility': 'keyword.control'
    '"=>"': 'entity.name.type.class'
    '"->"': 'storage.type.function'

    'ImportFromDeclaration > "from"': 'keyword.control'
    'ImportFromDeclaration > "import"': 'keyword.control'
    'ImportFromDeclaration > path': 'support.type'
    'ImportFromDeclaration > module > Identifier': 'support.type'
    'ImportFromDeclaration > Identifier': 'support.type'
    'ImportModuleDeclaration > "import"': 'keyword.control'
    'ImportModuleDeclaration > path': 'support.type'
    'ImportModuleDeclaration > "from"': 'keyword.control'

    'NodeTypeDeclaration > "abstract"': 'keyword.control'
    'NodeTypeDeclaration > "node"': 'storage.type.class'
    'NodeTypeDeclaration > Identifier': 'support.type'
    'NodeTypeDeclaration > extends': 'keyword.control'

    'Decorator > DecoratorIdentifier': 'entity.name.function.decorator'

    'NodeEdgeDeclaration > Identifier': 'support.storage.type'
    'NodeEdgeDeclaration > modifier': 'keyword.control'
    'NodeEdgeDeclaration > type': 'keyword.control'

    'MorphismDeclaration > "morph"': 'storage.type.function'
    'MorphismDeclaration > "mutates"': 'storage.type.function'
    'MorphismDeclaration > identifier': 'support.type'



    'Literal': 'support.type'

    'comment': 'comment.block'

    'StringTemplateLiteral': 'string.quoted.template'
    '
    TemplateSubstitution > "${",
    TemplateSubstitution > "}"
    ': 'punctuation.section.embedded'
    'TemplateSubstitution': 'embedded.source'







