name: 'Morph'
scopeName: 'source.morph'
type: 'tree-sitter'
parser: 'tree-sitter-morph'
fileTypes: ['morph']

firstLineRegex: [
  # shebang line
  '^#![ \\t]*/.*\\bmorph[\\d\\.]*\\b'

  # vim modeline
  'vim\\b.*\\bset\\b.*\\b(filetype|ft|syntax)=morph'
]

fileTypes: [
  'morph'
  'm'
]

comments:
  start: '// '

folds: [
  {
    type: 'comment'
  }
  {
    start: {type: '(', index: 0}
    end: {type: ')', index: -1}
  },
  {
    start: {type: '[', index: 0}
    end: {type: ']', index: -1}
  },
  {
    start: {type: '{', index: 0}
    end: {type: '}', index: -1}
  }
]

scopes:
    'program': 'source.morph'

    'import_from_statement > "from"': 'keyword.control'
    'import_from_statement > "import"': 'keyword.control'
    'import_module_statement > "import"': 'keyword.control'
    'import_statement > identifier': 'support.type'

    'node_declaration_statement > "export"': 'keyword.control'
    'node_declaration_statement > "abstract"': 'keyword.control'
    'node_declaration_statement > "node"': 'storage.type.class'
    'node_declaration_statement > identifier': 'support.type'
    'node_declaration_statement > "extends"': 'keyword.control'

    'tree_declaration_statement > "export"': 'keyword.control'
    'tree_declaration_statement > "tree"': 'storage.type.class'
    'tree_declaration_statement > identifier': 'support.type'

    'decorator > decorator_identifier': 'entity.name.function.decorator'

    'node_edge_declaration > identifier': 'support.storage.type'
    'node_edge_declaration > "->"': 'storage.type.function'

    'type_declaration_statement > "type"': 'storage.type.class'
    'type_declaration_statement > identifier': 'support.type'
    'type_declaration_statement > "="': 'keyword.control'

    'type > "|"': 'keyword.control'
    'single_type > identifier': 'storage.type'

    'function_declaration_statement > "func"': 'storage.type.function'
    'function_declaration_statement > identifier': 'support.type'
    'function_declaration_statement > "=>"': 'entity.name.type.class'

    'enum_declaration_statement > "enum"': 'storage.type.class'
    'enum_declaration_statement > identifier': 'support.type'

    'constant_declaration_statement > "const"': 'storage.modifier'
    'constant_declaration_statement > "export"': 'keyword.control'
    'constant_declaration_statement > identifier': 'support.type'
    'constant_declaration_statement > "="': 'keyword.control'

    'morph_declaration_statement > "morph"': 'storage.type.function'
    'morph_declaration_statement > identifier': 'support.type'

    'morph_creation_declaration > "new"': 'keyword.control'
    'morph_creation_declaration > identifier': 'storage.type'

    'morph_mutation_declaration > identifier': 'storage.type'

    'comment': 'comment.block'

    'simple_string': 'string.quoted'
    'template_string': 'string.quoted.template'
    'ebnf_literal': 'string.quoted.template'
    '
    template_substitution > "${",
    template_substitution > "}"
    ': 'punctuation.section.embedded'
    'template_substitution': 'embedded.source'







